<!DOCTYPE html>
<html>
    <head>
      <link rel="stylesheet" href="<%= static_path(@conn, "/css/codemirror.css") %>">
      <link rel="stylesheet" href="<%= static_path(@conn, "/js/codemirror/addon/hint/show-hint.css") %>">
      <script>
      var room = "<%= @room %>";
      var user = "<%= @user %>";
      </script>
      <style type="text/css">
      body {
            padding: 1em;
          }
      .ui.grid > .column:not(.row),
      .ui.grid > .row > .column {
        padding-left: 0.2rem;
        padding-right: 0.2rem;
        padding-top: 0.4rem;
        padding-bottom: 0rem;
      }
      .CodeMirror {
        height: 100%;
      }
      .userlist {
        font-size: 0.9rem;
      }
      .fullscreen {
        height: calc(80vh )
      }
      .ui.three.item.list {
        height: calc(10vh);
        overflow-y: scroll;
        overflow-x: hidden;
      }
      .ui.height.comments {
        height: calc(50vh);
        overflow-y: scroll;
        overflow-x: hidden;
      }
      .ui.chat {
        height: calc(10vh);
        overflow-y: scroll;
        overflow-x: hidden;
      }
      .ui.compact.segment {
        padding-top: 0rem;
        padding-bottom: 0rem;
        margin: 0em 0em;
        margin-bottom: 0.4em;
        width: 100%;
      }
      .ui.form .field {
        margin: 0em 0em;
        margin-bottom: 0.2em;
      }
    </style>
    </head>
    <body>
<!-- Following Menu -->
    <div class="ui tiny top fixed  menu">
        <div class="ui container">
            <a class="active item">Home</a>
            <a class="item">Work</a>
            <a class="item">Company</a>
            <a class="item">Careers</a>
            <div class="right menu">
                <div class="item">
                    <a class="ui button">Log in</a>
                </div>
                <div class="item">
                    <a class="ui primary button">Sign Up</a>
                </div>
            </div>
        </div>
    </div>
  </br>
  <div class="ui visible message">
    <p>Hello <%= @user %>, from <%= @room %> room!</p>
  </div>

<div class="ui height grid">
  <div class="one wide left floated column">
    <div class="ui segment">
    </div>
  </div>
  <div class="twelve wide column">
    <div class="ui fullscreen segment">
    <textarea id="code" name="code" style="height:100%">
#include

int main(int argc, char *argv[]) {

  /* An annoying "Hello World" example */
  for (auto i = 0; i < 0xFFFF; i++)
    cout << "Hello, World!" << endl;

  char c = '\n';
  unordered_map <string, vector<string> > m;
  m["key"] = "\\\\"; // this is an error

  return -2e3 + 12l;
}

    </textarea>

    </div>
  </div>

 <div class="three wide right floated column">
    <div class="ui compact segment">
      <div class="ui three item list right">
        <div class="item">
          <img class="ui avatar image" src="/images/avatar2/small/rachel.png">
          <div class="content">
            <a class="description userlist">Rachel</a>
          </div>
        </div>
        <div class="item">
          <img class="ui avatar image" src="/images/avatar2/small/lindsay.png">
          <div class="content userlist">
            <a class="description userlist">Lindsay</a>
          </div>
        </div>
        <div class="item">
          <img class="ui avatar image" src="/images/avatar2/small/matthew.png">
          <div class="content">
            <a class="description userlist">Matthew</a>
          </div>
        </div>
        <div class="item">
          <img class="ui avatar image" src="/images/avatar/small/jenny.jpg">
          <div class="content">
            <a class="description userlist">Jenny Hess</a>
          </div>
        </div>
        <div class="item">
          <img class="ui avatar image" src="/images/avatar/small/veronika.jpg">
          <div class="content">
            <a class="description userlist">Veronika Ossi</a>
          </div>
        </div>
      </div>
    </div>
  <div class="ui compact segment height comments">
  <!-- <h3 class="ui dividing header">Comments</h3> -->
  <div class="comment">
    <div class="content">
      <a class="author">Matt</a>
      <div class="metadata">
        <span class="date">Today at 5:42PM</span>
      </div>
      <div class="text">
        How artistic!
      </div>
    </div>
  </div>
  <div class="comment">
    <div class="content">
      <a class="author">Elliot Fu</a>
      <div class="metadata">
        <span class="date">Yesterday at 12:30AM</span>
      </div>
      <div class="text">
        <p>This has been very useful for my research. Thanks as well!</p>
      </div>
    </div>
      <div class="comment">
        <div class="content">
          <a class="author">Jenny Hess</a>
          <div class="metadata">
            <span class="date">Just now</span>
          </div>
          <div class="text">
            Elliot you are always so right :)
          </div>
        </div>
      </div>
  </div>
  <div class="comment">
    <div class="content">
      <a class="author">Joe Henderson</a>
      <div class="metadata">
        <span class="date">5 days ago</span>
      </div>
      <div class="text">
        Dude, this is awesome. Thanks so much
      </div>
    </div>
  </div>
</div>
<div>
 <div class="ui compact segement">
  <form class="ui reply form">
    <div class="aligned left field">
      <textarea class="ui chat" rows="2"></textarea> 
    </div>
    <div class="ui one width column blue labeled tiny submit icon button">
      <i class="icon edit"></i> Add Reply
    </div>
  </form>
 </div>
</div>
</div>
</div>
</div>
</div>
<!--<div id="messages"></div>
<input id="chat-input" type="text"></input>

<div>
  <video id="localVideo" autoplay></video>
  <video id="remoteVideo" autoplay></video>

  <button id="connect">Connect</button>
  <button id="call">Call</button>
  <button id="hangup">Hangup</button>
</div>
-->
<!--

var ph = require("phoenix_html");
var output = '';
for (var property in ph) {
          console.log(property + ":" + ph[property]);
          output += property+'; ';
        }
        alert(output);



<script src="<%= static_path(@conn, "/js/codemirror/addon/edit/matchbrackets.js") %>"></script>

<script src="<%= static_path(@conn, "/js/codemirror/addon/hint/show-hint.js") %>"></script>
<script src="<%= static_path(@conn, "/js/codemirror/addon/selection/active-line.js") %>"></script>
<script src="<%= static_path(@conn, "/js/codemirror/mode/clike/clike.js") %>"></script>
<script>
var room = "<%= @room %>";
var user = "<%= @user %>";


// To use Phoenix channels, the first step is to import Socket
// and connect at the socket path in "lib/web/endpoint.ex":
socket.connect();

// Now that you are connected, you can join channels with a topic:
var channel = socket.channel("room:" + room, {});

var chatInput = document.querySelector("#chat-input");
var messagesContainer = document.querySelector("#messages");
var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
  //dragDrop: false,
  styleActiveLine: true,
  styleSelectedText: true,
  lineNumbers: true,
  extraKeys: {"Ctrl-Space": "autocomplete"},
  mode: "text/x-csrc"
});


chatInput.addEventListener("keypress", function (event) {
  if (event.keyCode === 13) {
    channel.push("new_msg", { body: chatInput.value });
    chatInput.value = "";
  }
});

var userMarkers = {};
// Receive new message from channel
channel.on("new_msg", function (payload) {
  if (payload.user == null || payload.user == user) {
    console.log("received from same user: " + payload.user);
    return;
  }
  console.log("received payload: " + payload);
  var output = '';
  var entry = payload;
  for (var property in entry) {
    output += property + ":" + entry[property] + '; ';
  }
  output += "---";
  var entry = payload.body;
  for (var property in entry) {
    output += property + ":" + entry[property] + '; ';
  }
  console.log(output);
  switch(payload.body.origin) {
  case "+input":
  case "+delete":
  case "paste":
  case "undo":
  case "cut":
  case "drag":
    editor.replaceRange(payload.body.text, payload.body.from, payload.body.to);
    break;
  case "select":
    if (userMarkers[payload.user] != null) {
      userMarkers[payload.user].clear();
    }
    userMarkers[payload.user] = editor.getDoc().markText({line: payload.body.from.line, ch: payload.body.from.ch}, 
                                    {line: payload.body.to.line, ch: payload.body.to.ch}, {css: "background : yellow"});
    break;
  case "unselect":
    userMarkers[payload.user].clear();
    break;
  default:
    console.log("Received unknown origin" + payload.body.origin);
    alert(payload.body.origin)
  }
});

channel.join().receive("ok", function (resp) {
  console.log("Joined successfully", resp);
}).receive("error", function (resp) {
  console.log("Unable to join", resp);
});


// On editor change
editor.on("change", function(cm, changeObj) {
  if (changeObj["origin"] == null) {
    return;
  }
  var output = '';
  for (var property in changeObj) {
    output += property + ":" + changeObj[property] +'; ';
  }
  console.log("----- " + output +" ------");
  channel.push("new_msg", {user: user, body: changeObj})
});
console.log("*** Marking text *** ");
  console.log("*** Marked text *** ");
var selected = false;
var selectFrom;
var selectTo;
editor.on("cursorActivity", function(cm) {
  if (cm.somethingSelected()) {
    selected = true;
    var selFrom = cm.getCursor("from");
    if(selectFrom != null && selFrom.line != selectFrom.line && selFrom.ch != selectFrom.ch) {
    log(selFrom);
    log(selectFrom);  
      console.log("-- removed selection due to another select?--- ");
      channel.push("new_msg", {user: user, body: {origin: "unselect", from: selectFrom, to: selectTo}});
    }
    selectFrom = selFrom;
    selectTo = cm.getCursor("to");
    console.log("--selected--- ");
    channel.push("new_msg", {user: user, body: {origin: "select", from: selectFrom, to: selectTo}})
  } else if (selected) {
    console.log("-- removed selection--- ");
    selected = false;
    channel.push("new_msg", {user: user, body: {origin: "unselect", from: selectFrom, to: selectTo}})
    selectFrom = selectTo = null
  }
});

function log(object) {
  var output = '';
  for (var property in object) {
    output += property + ":" + object[property] +'; ';
  }
  console.log("----- " + output +" ------");
}
</script>
-->