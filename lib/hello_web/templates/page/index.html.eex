
<h2>Hello <%= @user %>, from <%= @room %> room!</h2>
</br>
<form><textarea id="code" name="code">
#include

int main(int argc, char *argv[]) {

  /* An annoying "Hello World" example */
  for (auto i = 0; i < 0xFFFF; i++)
    cout << "Hello, World!" << endl;

  char c = '\n';
  unordered_map <string, vector<string> > m;
  m["key"] = "\\\\"; // this is an error

  return -2e3 + 12l;
}

</textarea></form>



<div id="messages"></div>
<input id="chat-input" type="text"></input>

<!--

var ph = require("phoenix_html");
var output = '';
for (var property in ph) {
          console.log(property + ":" + ph[property]);
          output += property+'; ';
        }
        alert(output);

-->

<script src="<%= static_path(@conn, "/js/codemirror/addon/edit/matchbrackets.js") %>"></script>
<link rel="stylesheet" href="<%= static_path(@conn, "/js/codemirror/addon/hint/show-hint.css") %>">
<script src="<%= static_path(@conn, "/js/codemirror/addon/hint/show-hint.js") %>"></script>
<script src="<%= static_path(@conn, "/js/codemirror/addon/selection/active-line.js") %>"></script>
<script src="<%= static_path(@conn, "/js/codemirror/mode/clike/clike.js") %>"></script>
<script>
var room = "<%= @room %>";
var user = "<%= @user %>";


// To use Phoenix channels, the first step is to import Socket
// and connect at the socket path in "lib/web/endpoint.ex":
socket.connect();

// Now that you are connected, you can join channels with a topic:
var channel = socket.channel("room:" + room, {});

var chatInput = document.querySelector("#chat-input");
var messagesContainer = document.querySelector("#messages");
var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
  styleActiveLine: true,
  styleSelectedText: true,
  lineNumbers: true,
  extraKeys: {"Ctrl-Space": "autocomplete"},
  mode: "text/x-csrc"
});


chatInput.addEventListener("keypress", function (event) {
  if (event.keyCode === 13) {
    channel.push("new_msg", { body: chatInput.value });
    chatInput.value = "";
  }
});

var userMarkers = {};
// Receive new message from channel
channel.on("new_msg", function (payload) {
  if (payload.user == null || payload.user == user) {
    console.log("received from same user: " + payload.user);
    return;
  }
  console.log("received payload: " + payload);
  var output = '';
  var entry = payload;
  for (var property in entry) {
    output += property + ":" + entry[property] + '; ';
  }
  output += "---";
  var entry = payload.body;
  for (var property in entry) {
    output += property + ":" + entry[property] + '; ';
  }
  console.log(output);
  switch(payload.body.origin) {
  case "+input":
  case "+delete":
  case "paste":
  case "undo":
    editor.replaceRange(payload.body.text, payload.body.from, payload.body.to);
    break;
  case "select":
    if (userMarkers[payload.user] != null) {
      userMarkers[payload.user].clear();
    }
    userMarkers[payload.user] = editor.getDoc().markText({line: payload.body.from.line, ch: payload.body.from.ch}, 
                                    {line: payload.body.to.line, ch: payload.body.to.ch}, {css: "background : yellow"});
    break;
  case "unselect":
    userMarkers[payload.user].clear();
    break;
  default:
    console.log("Received unknown origin" + payload.body.origin);
    alert(payload.body.origin)
  }
});

channel.join().receive("ok", function (resp) {
  console.log("Joined successfully", resp);
}).receive("error", function (resp) {
  console.log("Unable to join", resp);
});


// On editor change
editor.on("change", function(cm, changeObj) {
  if (changeObj["origin"] == null) {
    return;
  }
  var output = '';
  for (var property in changeObj) {
    output += property + ":" + changeObj[property] +'; ';
  }
  console.log("----- " + output +" ------");
  channel.push("new_msg", {user: user, body: changeObj})
});
console.log("*** Marking text *** ");
  console.log("*** Marked text *** ");
var selected = false;
var selectFrom;
var selectTo;
editor.on("cursorActivity", function(cm) {
  if (cm.somethingSelected()) {
    selected = true;
    var selFrom = cm.getCursor("from");
    if(selectFrom != null && selFrom.line != selectFrom.line && selFrom.ch != selectFrom.ch) {
    log(selFrom);
    log(selectFrom);  
      console.log("-- removed selection due to another select?--- ");
      channel.push("new_msg", {user: user, body: {origin: "unselect", from: selectFrom, to: selectTo}});
    }
    selectFrom = selFrom;
    selectTo = cm.getCursor("to");
    console.log("--selected--- ");
    channel.push("new_msg", {user: user, body: {origin: "select", from: selectFrom, to: selectTo}})
  } else if (selected) {
    console.log("-- removed selection--- ");
    selected = false;
    channel.push("new_msg", {user: user, body: {origin: "unselect", from: selectFrom, to: selectTo}})
    selectFrom = selectTo = null
  }
});

function log(object) {
  var output = '';
  for (var property in object) {
    output += property + ":" + object[property] +'; ';
  }
  console.log("----- " + output +" ------");
}
</script>