
<!--

<script src="lib/codemirror.js"></script>
<link rel="stylesheet" href="lib/codemirror.css">
<script src="mode/javascript/javascript.js"></script>
-->


<!--
<script>

$(document).ready(function() {
  hljs.configure({
    tabReplace: '  ', // 2 spaces
    useBR: false});

  $('pre code').each(function(i, block) {
    hljs.highlightBlock(block);
  });

  $(".cpp").change(function() {
    //alert( "Handler for .change() called." );
    $('pre code').each(function(i, block) {
      hljs.highlightBlock(block);
    });
    
  });

  $( "#code" ).click(function() {
    $( ".cpp" ).change();
  });

  $("code").on("input", function() {
     // var pos = getCaretPosition("code");
     //var el = document.getElementById("code")
     //var sel = document.getSelection();
     // alert(sel.toString())
     //$( ".cpp" ).change();
     //sel.removeAllRanges();
     //sel.addRange(sel.getRangeAt(0));
     //el.focus();
      //setCaretPosition("code",pos);
});


function getCaretPosition(id) {
    var txt = document.getElementById(id);
    var output = '';
for (var property in txt) {
  output += property + ': ' + txt[property]+'; ';
}
alert(output);
    return {start: txt.offsetTop, end: txt.offset};
}

function setCaretPosition(id, pos) {
    var txt = document.getElementById(id);
    if(txt.createTextRange) {
      var range = txt.createTextRange();
      range.collapse(true);
      range.moveEnd('character', pos.start);
      range.moveStart('character', pos.end);
      range.select();
      return;
    }

    if(txt.selectionStart) {
      txt.focus();
      txt.setSelectionRange(pos.start, pos.end);
    }
}

});
</script> -->

<script>
(function() {
   // your page initialization code here
   // the DOM will be available here
   alert("called");
  //var myCodeMirror = CodeMirror(document.body);
  var myCodeMirror = CodeMirror.fromTextArea(myTextArea);
})();
</script>

<pre><code id="code" class="cpp" contenteditable="true">
#include

int main(int argc, char *argv[]) {

  /* An annoying "Hello World" example */
  for (auto i = 0; i < 0xFFFF; i++)
    cout << "Hello, World!" << endl;

  char c = '\n';
  unordered_map <string, vector<string> > m;
  m["key"] = "\\\\"; // this is an error

  return -2e3 + 12l;
}

</code></pre>
<div id="messages"></div>
<input id="chat-input" type="text"></input>